<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
	namespace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离
	注意：使用mapper代理开发时，namespace有特殊且重要的作用
 -->
<mapper namespace="com.xueqi.mapper.UserMapper">
    <!--
        [id]：statement的id，要求在命名空间内唯一
        [parameterType]：入参的java类型
        [resultType]：查询出的单条结果集对应的java类型
        [#{}]： 表示一个占位符?
        [#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义
     -->
    <select id="findUserById" parameterType="int" resultType="user">
        SELECT * FROM USER WHERE id = #{id}
    </select>

    <!--
		[${}]：表示拼接SQL字符串
	 	[${value}]：表示要拼接的是简单类型参数。
		 注意：
		1、如果参数为简单类型时，${}里面的参数名称必须为value
		2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}
	-->
    <select id="findUserByName" parameterType="String" resultType="user">
        SELECT * FROM USER WHERE username like '%${value}%'
    </select>

    <!--
        插入数据
        插入时自动返回主键id
        这里的占位是写模型的属性
    -->
    <insert id="save" parameterType="user">
        <!--
                    [selectKey标签]：通过select查询来生成主键
                    [keyProperty]：指定存放生成主键的属性
                    [resultType]：生成主键所对应的Java类型
                    [order]：指定该查询主键SQL语句的执行顺序，相对于insert语句
                    [last_insert_id]：MySQL的函数，要配合insert语句一起使用 -->
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
    </insert>

    <delete id="deleteUser" parameterType="int">
        delete from user where id = #{id}
    </delete>

    <update id="updateUser" parameterType="user">
        update user set sex = #{sex},address = #{address} where id = #{id}
    </update>


    <select id="findUserByUserQueryVo" parameterType="userQueryVO" resultType="orders">
        select * from orders where id = #{orders.id}
    </select>

    <select id="findUserListByMap" parameterType="hashmap" resultType="user">
        select * from user where username like '%${name}%' and sex = #{sex}
    </select>

    <select id="findUserCount" parameterType="userQueryVO" resultType="int">
        select count(*) from user where sex=#{user.sex}
    </select>


    <!-- 设置返回数据为resultMap-->
    <resultMap id="userResultMap" type="user">
        <id property="id" column="id_"></id>
        <result property="username" column="username_"></result>
        <result property="birthday" column="birthday_"></result>
        <result property="sex" column="sex_"></result>
        <result property="address" column="address_"></result>
    </resultMap>
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        select id id_,username username_,birthday birthday_,sex sex_,address address_ from user where id =#{dsfs}
    </select>


</mapper>